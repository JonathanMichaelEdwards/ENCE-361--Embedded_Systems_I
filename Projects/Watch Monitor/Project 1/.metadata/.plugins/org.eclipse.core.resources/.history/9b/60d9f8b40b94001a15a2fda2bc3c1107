//  ==========================================================================
//  ENCE-361: Embedded Systems 1 (2020);  University of Canterbury
//  Project:  Personal Fitness Monitor Project
//
//  FILE NAME:     normalMode.c
//  
//  Authors:       Jonathan Edwards, Riley Symon, Grace Kaye-Blake 
// 
//  Description:   
//  ==========================================================================


// Standard libaries
#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

// Arm Libaries
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/adc.h"
#include "driverlib/pwm.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/systick.h"
#include "driverlib/interrupt.h"
#include "driverlib/debug.h"
#include "driverlib/uart.h"
#include "utils/ustdlib.h"

// Project Libaries - created by us
#include "initialize.h"
#include "circBufT.h"
#include "display.h"
#include "buttons4.h"
#include "acc.h"

#include "FSM_MVC/model.h"


// Constants
#define CLOCK_20MHZ         20e6
#define SYSTICK_RATE_HZ     50
#define SLOWTICK_RATE_HZ    20  // changed rate
#define MAX_STR_LEN         16

// Global Varibles - ISR globals
// static bool slowTick;
static bool _slowTick;


// -----------------------------------------------------------------------------
//                            Set the slow tick varible
// -----------------------------------------------------------------------------
void setSlowTick(bool _tick) 
{
    _slowTick = _tick;
}


// -----------------------------------------------------------------------------
//                            Get the slow tick varible
// -----------------------------------------------------------------------------
bool getSlowTick(void) 
{
    return _slowTick;
}


// -----------------------------------------------------------------------------
//                           Initialize the 20 MHz clock                           
// -----------------------------------------------------------------------------
void initClock(void)
{
    // Set the clock rate to 20 MHz
    SysCtlClockSet (SYSCTL_SYSDIV_10 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN |
                   SYSCTL_XTAL_16MHZ);
}


// -----------------------------------------------------------------------------
//                 ISR interrupt handler for the SysTick interrupt
// -----------------------------------------------------------------------------
void SysTickIntHandler(void)
{
    static uint8_t tickCount = 0;
    const uint8_t ticksPerSlow = SYSTICK_RATE_HZ / SLOWTICK_RATE_HZ;

    updateButtons ();                      // Poll buttons
    if (++tickCount >= ticksPerSlow) {     // Signal slow ticks
        tickCount = 0;
        // slowTick = true;
        setSlowTick(true);
    }
}


// -----------------------------------------------------------------------------
//                       Initialize the Interrupt Handler                       
// -----------------------------------------------------------------------------
void initSysTick(void)
{
    // Set up the period for the SysTick timer.  The SysTick timer period is
    // set as a function of the system clock.
    SysTickPeriodSet(CLOCK_20MHZ / SYSTICK_RATE_HZ);
    
    // Register the interrupt handler
    SysTickIntRegister(SysTickIntHandler);
    
    // Enable interrupt and device
    SysTickIntEnable();
    SysTickEnable();
}
